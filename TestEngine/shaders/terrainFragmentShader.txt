#version 400 core


in vec2 pass_textureCoords;
in vec3 transformedNormals;
in vec3 to_lightVector;
in vec3 to_cameraVector;
in float visibility;

out vec4 Color;

uniform sampler2D backgroundTextureRepresentedByBlack;
uniform sampler2D textureRepresentedByRed;
uniform sampler2D textureRepresentedByGreen;
uniform sampler2D textureRepresentedByBlue;
uniform sampler2D blendMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){
	// start per pixel lighting calculations
	
	vec3 normalized_to_lightVector = normalize(to_lightVector);
	vec3 normalized_transformedNormals = normalize(transformedNormals);

	float brightness = dot(normalized_transformedNormals, normalized_to_lightVector);
	float clampedBrightness = max(brightness, 0.0);

	vec3 diffusedLighting = clampedBrightness * lightColour;

	// end per pixel lighting calculations
	
	// start specular lighting calculations

	vec3 reflected_from_lightVector = reflect((-1 * to_lightVector), transformedNormals);
	float specularBrightness = dot(normalize(reflected_from_lightVector), normalize(to_cameraVector));
	float clamped_specularBrightness = max(specularBrightness, 0.0);
	vec3 specularLight = (pow(clamped_specularBrightness, shineDamper) * reflectivity) * lightColour;
	
	// end specular lighting calculations

	// start multy textering code

	vec4 blendMapPixelColor = texture(blendMap, pass_textureCoords);

	vec2 tiledTextureCoords = pass_textureCoords  * 60;

	float amount_of_blackInBlendMapPixel = 1 - (blendMapPixelColor.r + blendMapPixelColor.g + blendMapPixelColor.b); // this will be 1 when the pixel is black
	vec4 grassTextureColorAmount = amount_of_blackInBlendMapPixel * texture(backgroundTextureRepresentedByBlack, tiledTextureCoords);
	vec4 dirtTextureColorAmount = blendMapPixelColor.r * texture(textureRepresentedByRed, tiledTextureCoords);
	vec4 pinkFlowerTextureColorAmount = blendMapPixelColor.g * texture(textureRepresentedByGreen, tiledTextureCoords);
	vec4 pathWayTextureColorAmount = blendMapPixelColor.b * texture(textureRepresentedByBlue, tiledTextureCoords);

	vec4 totalColor = grassTextureColorAmount + dirtTextureColorAmount + pinkFlowerTextureColorAmount + pathWayTextureColorAmount;

	// end multy textering code

	Color = vec4(diffusedLighting, 1.0) * totalColor + vec4(specularLight, 1);
	Color = mix(vec4(skyColor, 1.0), Color, visibility);

}