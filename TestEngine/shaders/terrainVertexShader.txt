#version 400 core

in vec3 positions;
in vec2 textureCoords;
in vec3 normals;

out vec2 pass_textureCoords;
out vec3 to_lightVector;
out vec3 transformedNormals;
out vec3 to_cameraVector;
out float visibility;

uniform mat4 projectionMatrix;
uniform mat4 transformationMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float fogDensity;
uniform float fogGradient;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(positions, 1.0);
	vec4 vertexPositionInRelationToCamera = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * vertexPositionInRelationToCamera;
	pass_textureCoords = textureCoords;
	
	// start per pixel lighting calculations

	transformedNormals = (transformationMatrix * vec4(normals, 0.0)).xyz;
	to_lightVector = lightPosition - worldPosition.xyz;

	// end per pixel lighting calculations


	// start specular light calculations

	to_cameraVector = (inverse(viewMatrix) * vec4(0, 0, 0, 1)).xyz - worldPosition.xyz; // camera_position - vertex_position
	
	// end specular light calculations

	// start fog calculations

	float veretxDistanceFromCamera = length(vertexPositionInRelationToCamera.xyz);
	visibility = exp(-pow((veretxDistanceFromCamera * fogDensity), fogGradient));
	visibility = clamp(visibility, 0, 1); // optional

	// end fog calculations
}